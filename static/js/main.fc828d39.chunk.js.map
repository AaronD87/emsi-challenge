{"version":3,"sources":["assets/university.svg","hooks/useProgramCounts.js","components/Schools.js","hooks/useFetch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useProgramCounts","programCount","useState","undergraduateDegreeCount","setUndergraduateDegrees","associateDegreeCount","setAssociateDegrees","bachelorDegreeCount","setBachelorDegrees","postBaccalaureateCertificateCount","setPostBaccalaureateCertificates","mastersDegreeCount","setMastersDegrees","doctoralDegreeCount","setDoctoralDegrees","firstProfessionalDegreeCount","setFirstProfessionalDegrees","graduateProfessionalCertificateCount","setGraduateProfessionalCertificates","useEffect","a","undergraduateDegrees","associateDegrees","bachelorDegrees","postBaccalaureateCertificates","mastersDegrees","doctoralDegrees","firstProfessionalDegrees","graduateProfessionalCertificates","i","length","credential","level","console","log","programCounts","Schools","schools","schoolName","schoolState","schoolCity","schoolAdmissions","schoolStudentSize","className","src","logo","alt","toLocaleString","Math","round","value","max","useFetch","url","initialValue","data","setData","loading","setLoading","axios","get","response","status","fetchData","App","process","results","map","school","key","href","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc828d39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/university.22792d78.svg\";","import { useState, useEffect } from 'react'\n\nconst useProgramCounts = (programCount) => {\n  const [undergraduateDegreeCount, setUndergraduateDegrees] = useState(0)\n  const [associateDegreeCount, setAssociateDegrees] = useState(0)\n  const [bachelorDegreeCount, setBachelorDegrees] = useState(0)\n  const [\n    postBaccalaureateCertificateCount,\n    setPostBaccalaureateCertificates,\n  ] = useState(0)\n  const [mastersDegreeCount, setMastersDegrees] = useState(0)\n  const [doctoralDegreeCount, setDoctoralDegrees] = useState(0)\n  const [firstProfessionalDegreeCount, setFirstProfessionalDegrees] = useState(\n    0\n  )\n  const [\n    graduateProfessionalCertificateCount,\n    setGraduateProfessionalCertificates,\n  ] = useState(0)\n\n  useEffect(() => {\n    const programCounts = async function () {\n      let undergraduateDegrees = 0\n      let associateDegrees = 0\n      let bachelorDegrees = 0\n      let postBaccalaureateCertificates = 0\n      let mastersDegrees = 0\n      let doctoralDegrees = 0\n      let firstProfessionalDegrees = 0\n      let graduateProfessionalCertificates = 0\n\n      for (let i = 0; i < programCount.length; i++) {\n        switch (programCount[i].credential.level) {\n          case 1:\n            undergraduateDegrees++\n            break\n          case 2:\n            associateDegrees++\n            break\n          case 3:\n            bachelorDegrees++\n            break\n          case 4:\n            postBaccalaureateCertificates++\n            break\n          case 5:\n            mastersDegrees++\n            break\n          case 6:\n            doctoralDegrees++\n            break\n          case 7:\n            firstProfessionalDegrees++\n            break\n          case 8:\n            graduateProfessionalCertificates++\n            break\n          default:\n            console.log('degree not found')\n            break\n        }\n      }\n      setUndergraduateDegrees(undergraduateDegrees)\n      setAssociateDegrees(associateDegrees)\n      setBachelorDegrees(bachelorDegrees)\n      setPostBaccalaureateCertificates(postBaccalaureateCertificates)\n      setMastersDegrees(mastersDegrees)\n      setDoctoralDegrees(doctoralDegrees)\n      setFirstProfessionalDegrees(firstProfessionalDegrees)\n      setGraduateProfessionalCertificates(graduateProfessionalCertificates)\n    }\n    programCounts()\n  }, [programCount])\n  return {\n    undergraduateDegreeCount,\n    associateDegreeCount,\n    bachelorDegreeCount,\n    postBaccalaureateCertificateCount,\n    mastersDegreeCount,\n    doctoralDegreeCount,\n    firstProfessionalDegreeCount,\n    graduateProfessionalCertificateCount,\n  }\n}\n\nexport default useProgramCounts\n","import React from 'react'\nimport useProgramCounts from '../hooks/useProgramCounts'\nimport './schools.scss'\nimport logo from '../assets/university.svg'\n\nconst Schools = ({ schools }) => {\n  const {\n    'school.name': schoolName,\n    'school.state': schoolState,\n    'school.city': schoolCity,\n    'latest.admissions.admission_rate.overall': schoolAdmissions,\n    'latest.student.size': schoolStudentSize,\n    'latest.programs.cip_4_digit': programCount,\n  } = schools\n\n  const {\n    undergraduateDegreeCount,\n    associateDegreeCount,\n    bachelorDegreeCount,\n    postBaccalaureateCertificateCount,\n    mastersDegreeCount,\n    doctoralDegreeCount,\n    firstProfessionalDegreeCount,\n    graduateProfessionalCertificateCount,\n  } = useProgramCounts(programCount)\n\n  return (\n    <article className=\"card\">\n      <section className=\"upper-card-wrapping\">\n        <h2 className=\"school-title\">{schoolName}</h2>\n        <p className=\"city-state\">\n          {schoolCity}, {schoolState}\n        </p>\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n        {schoolStudentSize === null ? (\n          <div className=\"student-size-unavailable\">\n            <p>\n              Student Size: <span className=\"unavailable\">unavailable</span>\n            </p>\n          </div>\n        ) : (\n          <p className=\"student-size-header\"> Student Size: </p>\n        )}\n        {schoolStudentSize === null ? (\n          ''\n        ) : (\n          <p className=\"student-size\">{schoolStudentSize.toLocaleString()}</p>\n        )}\n        {schoolAdmissions === null ? (\n          <div className=\"admission-rate-unavailable\">\n            <p> Admissions Rate: unavailable </p>\n          </div>\n        ) : (\n          <p className=\"admission-rate-header\"> Admission Rate: </p>\n        )}\n        {schoolAdmissions === null ? (\n          ''\n        ) : (\n          <div className=\"admission-rate-progress-bar-wrapper\">\n            <p className=\"admission-rate\">\n              {Math.round(schoolAdmissions * 100)}%\n            </p>\n            <progress\n              value={Math.round(schoolAdmissions * 100)}\n              max=\"100\"\n              className=\"admission-rate-progress-bar\"\n            ></progress>\n          </div>\n        )}\n      </section>\n\n      <hr />\n\n      <section className=\"lower-card-wrapping\">\n        <p className=\"program-count-header\"> Available Program Counts: </p>\n        {undergraduateDegreeCount > 0 && (\n          <p className=\"degree-counts\">\n            Undergraduate Degree: <strong>{undergraduateDegreeCount}</strong>\n          </p>\n        )}\n        {associateDegreeCount > 0 && (\n          <p className=\"degree-counts\">\n            Associate Degree: <strong>{associateDegreeCount}</strong>\n          </p>\n        )}\n        {bachelorDegreeCount > 0 && (\n          <p className=\"degree-counts\">\n            Bachelors Degree: <strong>{bachelorDegreeCount}</strong>\n          </p>\n        )}\n        {postBaccalaureateCertificateCount > 0 && (\n          <p className=\"degree-counts\">\n            Post Baccalaureate Certificate:\n            <strong>{postBaccalaureateCertificateCount}</strong>\n          </p>\n        )}\n        {mastersDegreeCount > 0 && (\n          <p className=\"degree-counts\">\n            Masters Degree: <strong>{mastersDegreeCount}</strong>\n          </p>\n        )}\n        {doctoralDegreeCount > 0 && (\n          <p className=\"degree-counts\">\n            Doctoral Degree: <strong>{doctoralDegreeCount}</strong>\n          </p>\n        )}\n        {firstProfessionalDegreeCount > 0 && (\n          <p className=\"degree-counts\">\n            First Professional Degree:\n            <strong>{firstProfessionalDegreeCount}</strong>\n          </p>\n        )}\n        {graduateProfessionalCertificateCount > 0 && (\n          <p className=\"degree-counts\">\n            Graduate/Professional Certificate:\n            <strong>{graduateProfessionalCertificateCount}</strong>\n          </p>\n        )}\n      </section>\n    </article>\n  )\n}\n\nexport default Schools\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst useFetch = (url, initialValue) => {\n  const [data, setData] = useState(initialValue)\n  const [loading, setLoading] = useState(true)\n  useEffect(() => {\n    const fetchData = async function () {\n      try {\n        setLoading(true)\n        const response = await axios.get(url)\n        if (response.status === 200) {\n          setData(response.data)\n        }\n      } catch (error) {\n        throw error\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [url])\n  return { loading, data }\n}\n\nexport default useFetch\n","import React from 'react'\nimport Schools from './components/Schools'\nimport useFetch from './hooks/useFetch'\n\nfunction App() {\n  const API_KEY = process.env.REACT_APP_API_KEY\n  const url = `https://api.data.gov/ed/collegescorecard/v1/schools.json?per_page=100&_fields=school.name,school.school_url,id,school.city,school.state,latest.student.size,latest.admissions.admission_rate.overall,latest.programs.cip_4_digit.credential,latest.programs.cip_4_digit.title&api_key=${API_KEY}`\n\n  const { loading, data } = useFetch(url)\n\n  return (\n    <main className=\"wrapper\">\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        data &&\n        data.results.length > 0 &&\n        data.results.map((school, i) => <Schools schools={school} key={i} />)\n      )}\n\n      <div>\n        Icons made by\n        <a\n          href=\"https://www.flaticon.com/authors/pixel-perfect\"\n          title=\"Pixel perfect\"\n        >\n          Pixel perfect\n        </a>\n        from\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}